// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event.sql

package sqlcmain

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getEventsList = `-- name: GetEventsList :many
SELECT 
    e.id AS event_id,
    e.prime AS event_prime,
    e.happend_at,
    e.created_at AS event_created_at,
    f.id AS face_id,
    f.prime AS face_prime,
    f.image AS face_image,
    f.thumbnail AS face_thumbnail,
    f.score AS face_score,
    c.id AS camera_id,
    c.prime AS camera_prime,
    c.name AS camera_name,
    c.type AS camera_type,
    c.url AS camera_url,
    c.on_demand AS camera_on_demand,
    p.id AS person_id,
    p.prime AS person_prime,
    p.first_name AS person_first_name,
    p.last_name AS person_last_name
FROM 
    "Event" e
LEFT JOIN 
    "Face" f ON e.face_id = f.id
LEFT JOIN 
    "Camera" c ON e.camera_id = c.id
LEFT JOIN 
    "Person" p ON e.person_id = p.id
ORDER BY 
    e.happend_at DESC
LIMIT $1 OFFSET $2
`

type GetEventsListRow struct {
	EventID         int64              `json:"event_id"`
	EventPrime      string             `json:"event_prime"`
	HappendAt       pgtype.Timestamptz `json:"happend_at"`
	EventCreatedAt  pgtype.Timestamptz `json:"event_created_at"`
	FaceID          *int64             `json:"face_id"`
	FacePrime       *string            `json:"face_prime"`
	FaceImage       *string            `json:"face_image"`
	FaceThumbnail   *string            `json:"face_thumbnail"`
	FaceScore       *float64           `json:"face_score"`
	CameraID        *int64             `json:"camera_id"`
	CameraPrime     *string            `json:"camera_prime"`
	CameraName      *string            `json:"camera_name"`
	CameraType      *string            `json:"camera_type"`
	CameraUrl       *string            `json:"camera_url"`
	CameraOnDemand  *bool              `json:"camera_on_demand"`
	PersonID        *int64             `json:"person_id"`
	PersonPrime     *string            `json:"person_prime"`
	PersonFirstName *string            `json:"person_first_name"`
	PersonLastName  *string            `json:"person_last_name"`
}

func (q *Queries) GetEventsList(ctx context.Context, limit int32, offset int32) ([]GetEventsListRow, error) {
	rows, err := q.db.Query(ctx, getEventsList, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsListRow
	for rows.Next() {
		var i GetEventsListRow
		if err := rows.Scan(
			&i.EventID,
			&i.EventPrime,
			&i.HappendAt,
			&i.EventCreatedAt,
			&i.FaceID,
			&i.FacePrime,
			&i.FaceImage,
			&i.FaceThumbnail,
			&i.FaceScore,
			&i.CameraID,
			&i.CameraPrime,
			&i.CameraName,
			&i.CameraType,
			&i.CameraUrl,
			&i.CameraOnDemand,
			&i.PersonID,
			&i.PersonPrime,
			&i.PersonFirstName,
			&i.PersonLastName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
