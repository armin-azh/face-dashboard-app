// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: camera.sql

package sqlcmain

import (
	"context"
)

const createCamera = `-- name: CreateCamera :one
INSERT INTO "Camera" (prime, name, type, url, on_demand)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, prime, name, type, url, on_demand, created_at
`

func (q *Queries) CreateCamera(ctx context.Context, prime string, name string, type_ string, url string, onDemand bool) (Camera, error) {
	row := q.db.QueryRow(ctx, createCamera,
		prime,
		name,
		type_,
		url,
		onDemand,
	)
	var i Camera
	err := row.Scan(
		&i.ID,
		&i.Prime,
		&i.Name,
		&i.Type,
		&i.Url,
		&i.OnDemand,
		&i.CreatedAt,
	)
	return i, err
}

const getCameraByPrime = `-- name: GetCameraByPrime :one
SELECT id, prime, name, type, url, on_demand, created_at
FROM "Camera"
WHERE prime = $1
LIMIT 1
`

func (q *Queries) GetCameraByPrime(ctx context.Context, prime string) (Camera, error) {
	row := q.db.QueryRow(ctx, getCameraByPrime, prime)
	var i Camera
	err := row.Scan(
		&i.ID,
		&i.Prime,
		&i.Name,
		&i.Type,
		&i.Url,
		&i.OnDemand,
		&i.CreatedAt,
	)
	return i, err
}

const listCameras = `-- name: ListCameras :many
SELECT id, prime, name, type, url, on_demand, created_at 
FROM "Camera"
ORDER BY id DESC
LIMIT $1 OFFSET $2
`

func (q *Queries) ListCameras(ctx context.Context, limit int32, offset int32) ([]Camera, error) {
	rows, err := q.db.Query(ctx, listCameras, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Camera
	for rows.Next() {
		var i Camera
		if err := rows.Scan(
			&i.ID,
			&i.Prime,
			&i.Name,
			&i.Type,
			&i.Url,
			&i.OnDemand,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
